{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["localStorageKey","rootStyle","display","backgroundColor","padding","listStyle","width","words","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","chosen","objectSpread","userSelect","grid","margin","concat","fontWeight","background","borderRadius","getListStyle","isDraggingOver","defaultState","items","map","word","id","content","selected","App","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","id2List","droppable","droppable2","getList","getLists","onDragEnd","state","updateLists","fromStorage","localStorage","getItem","lists","JSON","parse","isArray","Error","e","console","error","newState","silent","setItem","stringify","forceUpdate","handleReset","react_default","a","createElement","react_beautiful_dnd_esm","style","provided","snapshot","ref","innerRef","item","key","draggableId","assign","draggableProps","dragHandleProps","placeholder","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6dd6712.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst localStorageKey = 'johari.lists';\n\nconst backgroundColor = '#7A9A5F';\nconst itemColor = '#CDE0BD';\nconst itemDraggingColor = '#9EB987';\nconst itemChosenColor = '#FFFFFF';\nconst dragOverListColor = '#5C7B42';\n\nconst grid = 4;\nconst rootStyle = { display: 'flex', backgroundColor, padding: grid };\nconst listStyle = { backgroundColor, padding: grid, width: 150 };\n\nconst words = [\n    'able',\n    'accepting',\n    'adaptable',\n    'bold',\n    'brave',\n    'calm',\n    'caring',\n    'cheerful',\n    'clever',\n    'complex',\n    'confident',\n    'dependable',\n    'dignified',\n    'energetic',\n    'extroverted',\n    'friendly',\n    'giving',\n    'happy',\n    'helpful',\n    'idealistic',\n    'independent',\n    'ingenious',\n    'intelligent',\n    'introverted',\n    'kind',\n    'knowledgeable',\n    'logical',\n    'loving',\n    'mature',\n    'modest',\n    'nervous',\n    'observant',\n    'organised',\n    'patient',\n    'powerful',\n    'proud',\n    'quiet',\n    'reflective',\n    'relaxed',\n    'religious',\n    'responsive',\n    'searching',\n    'self-assertive',\n    'self-conscious',\n    'sensible',\n    'sentimental',\n    'shy',\n    'silly',\n    'spontaneous',\n    'sympathetic',\n    'tense',\n    'trustworthy',\n    'warm',\n    'wise',\n    'witty',\n];\n\nconst getWords = () => words.map(word => ({ id: word, content: word }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle, chosen) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    fontWeight: 'bold',\n\n    // change background colour if dragging\n    background: isDragging ? itemDraggingColor : chosen ? itemChosenColor : itemColor,\n    borderRadius: '3px',\n\n    // styles we need to apply on draggables\n    ...draggableStyle,\n});\n\nconst getListStyle = isDraggingOver => ({\n    ...listStyle,\n    backgroundColor: isDraggingOver ? dragOverListColor : backgroundColor,\n});\n\nconst defaultState = () => {\n    return {\n        items: getWords(),\n        selected: [],\n    };\n};\n\nclass App extends Component {\n    constructor(...args) {\n        super(...args);\n\n        if (!this.getLists()) {\n            this.updateLists(defaultState(), true);\n        }\n    }\n    // state = defaultState();\n\n    /**\n     * A semi-generic way to handle multiple lists. Matches\n     * the IDs of the droppable container to the names of the\n     * source arrays stored in the state.\n     */\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected',\n    };\n\n    getList = id => {\n        return this.getLists()[this.id2List[id]];\n    };\n\n    onDragEnd = result => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n\n            let state = { items };\n\n            if (source.droppableId === 'droppable2') {\n                state = { selected: items };\n            }\n\n            this.updateLists(state);\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n\n            this.updateLists({\n                items: result.droppable,\n                selected: result.droppable2,\n            });\n        }\n    };\n\n    getLists = () => {\n        try {\n            const fromStorage = localStorage.getItem(localStorageKey);\n            const lists = JSON.parse(fromStorage);\n            if (!Array.isArray(lists.selected)) {\n                throw new Error('No selected list');\n            }\n            if (!Array.isArray(lists.items)) {\n                throw new Error('No selected list');\n            }\n            return lists;\n        } catch (e) {\n            console.error(e);\n            return null;\n        }\n    };\n\n    updateLists = (newState, silent) => {\n        const lists = this.getLists();\n        const state = { ...lists, ...newState };\n        localStorage.setItem(localStorageKey, JSON.stringify(state));\n        if (!silent) {\n            this.forceUpdate();\n        }\n    };\n\n    handleReset = () => {\n        this.updateLists(defaultState());\n    };\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    render() {\n        const lists = this.getLists();\n        if (!lists) {\n            return null;\n        }\n        // console.log(lists);\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div style={rootStyle}>\n                    <Droppable droppableId=\"droppable\">\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                style={getListStyle(snapshot.isDraggingOver)}\n                            >\n                                {lists.items.map((item, index) => (\n                                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}\n                                            >\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                    <Droppable droppableId=\"droppable2\">\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                style={getListStyle(snapshot.isDraggingOver)}\n                            >\n                                {lists.selected.map((item, index) => (\n                                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style,\n                                                    index < 6\n                                                )}\n                                            >\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                    <div>\n                        <button type=\"button\" onClick={this.handleReset}>\n                            Reset\n                        </button>\n                    </div>\n                </div>\n            </DragDropContext>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}