---
laytout: post
title:  "Falcor Part 1"
date:   2015-08-18 00:30:48
---

I've been looking at [Netflix][1]'s [Falcor][2] it's an attempt to solve one of the problems with [REST][3] APIs which is to do with granularity. When creating an application you often want to work with resources at a highly granular level (individual properties) rather than in terms of whole documents and that for some operations you need information about many resources but you don't want to make multiple calls accross the wire for the information from each resource. 

A simple example might be that in your application you want to display a list of recent items with a title and a link. 

```
GET /recent
```

``` js
[
 {"id": 27, "title": "Foo"},
 {"id": 38, "title": "Bar"},
 {"id": 97, "title": "Baz"},
 ...
]
```

As an application evolves the requirements change - it may be that a thumbnail is needed too...

``` js
[
 {"id": 27, "title": "Foo", "thumbnail": "/static/foo.jpg"},
 {"id": 38, "title": "Bar", "thumbnail": "/static/bar.jpg"},
 {"id": 97, "title": "Baz", "thumbnail": "/static/baz.jpg},
 ...
]
```

And then the item owner's wanted to be displayed as a tooltip (or some such).

Each time a feature is added the property needs adding to the endpoint - meaning extra backend development.

Then if the endpoint is used by multiple clients say web vs mobile where the amount of data needs to be reduced for bandwidth / machine capabilty a scheme might be added to specify which properties are wanted, this is not restful, creates complexity (different APIs have different schemes) and is again more backend work needed for new client tcode.

What [Falcor][2] does is introduce a consistent scheme to facilate the access and manipulation of granular data trying not to throw the baby out with the bathwater in terms of keeping things cache friendly.


So here's an example of how the initial query mightt be expressed using the [Falcor][2] API on the client:

``` js
 model.get('recent[0..5]["id","title"]')
 .then(function(response) {
  // work with the response...
 });
```

We can see that we've been able to specify both a range query and which properties we want from the underlying object graph.

Back on the server there's a router to which you add routes to deal with incoming queries, so for this route you'd add something like:

``` js
 {
  route: 'recent[{ranges}][{keys}]',
  get: function(pathSet) {
   var ranges = pathSet[1];
   var props = pathSet[2];
   ...
  }
 }
```

Where the `pathSet` looks like this:

``` js
[ "recent", [ { to: 5, from: 0 } ], [ "id", "title" ] ]
```

And so a more rich client such as a desktop could request:

``` js
get('recent[0..10]["id","title","thumbnail","author"]')
```

The same route in the API backend would match and be able to fulfil this request without changes.

What you'll note here is that the actual resource that's been recently used should live under a different route - such as `items` by their ids - in [Part 2]([here](/2015/08/20/falcor-2.html) I'll look into how this works.

[1]:https://www.netflix.com
[2]:https://netflix.github.io/falcor
[3]:https://en.wikipedia.org/wiki/Representational_state_transfer